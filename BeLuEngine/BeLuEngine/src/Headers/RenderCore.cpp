#include "stdafx.h"
#include "RenderCore.h"

// PIX Events
#include "WinPixEventRuntime/pix3.h"

#include "../Renderer/API/D3D12/D3D12GraphicsContext.h"
#include "../Renderer/API/D3D12/D3D12GraphicsManager.h"

ScopedPIXEvent::ScopedPIXEvent(const char* nameOfTask, IGraphicsContext* graphicsContext)
{
	BL_ASSERT(graphicsContext);
    m_pGraphicsContext = graphicsContext;

    E_GRAPHICS_API graphicsApi = IGraphicsManager::GetGraphicsApiType();

	UINT64 col = 0;
    if (graphicsApi == E_GRAPHICS_API::D3D12)
    {
        PIXBeginEvent(static_cast<D3D12GraphicsContext*>(m_pGraphicsContext)->m_pCommandList, col, nameOfTask);
    }
    else if (graphicsApi == E_GRAPHICS_API::VULKAN)
    {
        BL_ASSERT_MESSAGE(false, "Trying to create a scopedPixEvent with Vulkan when it is not yet supported!\n");
    }
}

ScopedPIXEvent::~ScopedPIXEvent()
{
    E_GRAPHICS_API graphicsApi = IGraphicsManager::GetGraphicsApiType();

    UINT64 col = 0;
    if (graphicsApi == E_GRAPHICS_API::D3D12)
    {
        PIXEndEvent(static_cast<D3D12GraphicsContext*>(m_pGraphicsContext)->m_pCommandList);
    }
    else if (graphicsApi == E_GRAPHICS_API::VULKAN)
    {
        BL_ASSERT_MESSAGE(false, "Trying to create a scopedPixEvent with Vulkan when it is not yet supported!\n");
    }
}

DXGI_FORMAT ConvertBLFormatToD3D12Format(BL_FORMAT format)
{
    switch (format)
    {
        case BL_FORMAT_UNKNOWN: return DXGI_FORMAT_UNKNOWN;
        case BL_FORMAT_R32G32B32A32_TYPELESS: return DXGI_FORMAT_R32G32B32A32_TYPELESS;
        case BL_FORMAT_R32G32B32A32_FLOAT: return DXGI_FORMAT_R32G32B32A32_FLOAT;
        case BL_FORMAT_R32G32B32A32_UINT: return DXGI_FORMAT_R32G32B32A32_UINT;
        case BL_FORMAT_R32G32B32A32_SINT: return DXGI_FORMAT_R32G32B32A32_SINT;
        case BL_FORMAT_R32G32B32_TYPELESS: return DXGI_FORMAT_R32G32B32_TYPELESS;
        case BL_FORMAT_R32G32B32_FLOAT: return DXGI_FORMAT_R32G32B32_FLOAT;
        case BL_FORMAT_R32G32B32_UINT: return DXGI_FORMAT_R32G32B32_UINT;
        case BL_FORMAT_R32G32B32_SINT: return DXGI_FORMAT_R32G32B32_SINT;
        case BL_FORMAT_R16G16B16A16_TYPELESS: return DXGI_FORMAT_R16G16B16A16_TYPELESS;
        case BL_FORMAT_R16G16B16A16_FLOAT: return DXGI_FORMAT_R16G16B16A16_FLOAT;
        case BL_FORMAT_R16G16B16A16_UNORM: return DXGI_FORMAT_R16G16B16A16_UNORM;
        case BL_FORMAT_R16G16B16A16_UINT: return DXGI_FORMAT_R16G16B16A16_UINT;
        case BL_FORMAT_R16G16B16A16_SNORM: return DXGI_FORMAT_R16G16B16A16_SNORM;
        case BL_FORMAT_R16G16B16A16_SINT: return DXGI_FORMAT_R16G16B16A16_SINT;
        case BL_FORMAT_R32G32_TYPELESS: return DXGI_FORMAT_R32G32_TYPELESS;
        case BL_FORMAT_R32G32_FLOAT: return DXGI_FORMAT_R32G32_FLOAT;
        case BL_FORMAT_R32G32_UINT: return DXGI_FORMAT_R32G32_UINT;
        case BL_FORMAT_R32G32_SINT: return DXGI_FORMAT_R32G32_SINT;
        case BL_FORMAT_R32G8X24_TYPELESS: return DXGI_FORMAT_R32G8X24_TYPELESS;
        case BL_FORMAT_D32_FLOAT_S8X24_UINT: return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
        case BL_FORMAT_R32_FLOAT_X8X24_TYPELESS: return DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
        case BL_FORMAT_X32_TYPELESS_G8X24_UINT: return DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
        case BL_FORMAT_R10G10B10A2_TYPELESS: return DXGI_FORMAT_R10G10B10A2_TYPELESS;
        case BL_FORMAT_R10G10B10A2_UNORM: return DXGI_FORMAT_R10G10B10A2_UNORM;
        case BL_FORMAT_R10G10B10A2_UINT: return DXGI_FORMAT_R10G10B10A2_UINT;
        case BL_FORMAT_R11G11B10_FLOAT: return DXGI_FORMAT_R11G11B10_FLOAT;
        case BL_FORMAT_R8G8B8A8_TYPELESS: return DXGI_FORMAT_R8G8B8A8_TYPELESS;
        case BL_FORMAT_R8G8B8A8_UNORM: return DXGI_FORMAT_R8G8B8A8_UNORM;
        case BL_FORMAT_R8G8B8A8_UNORM_SRGB: return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
        case BL_FORMAT_R8G8B8A8_UINT: return DXGI_FORMAT_R8G8B8A8_UINT;
        case BL_FORMAT_R8G8B8A8_SNORM: return DXGI_FORMAT_R8G8B8A8_SNORM;
        case BL_FORMAT_R8G8B8A8_SINT: return DXGI_FORMAT_R8G8B8A8_SINT;
        case BL_FORMAT_R16G16_TYPELESS: return DXGI_FORMAT_R16G16_TYPELESS;
        case BL_FORMAT_R16G16_FLOAT: return DXGI_FORMAT_R16G16_FLOAT;
        case BL_FORMAT_R16G16_UNORM: return DXGI_FORMAT_R16G16_UNORM;
        case BL_FORMAT_R16G16_UINT: return DXGI_FORMAT_R16G16_UINT;
        case BL_FORMAT_R16G16_SNORM: return DXGI_FORMAT_R16G16_SNORM;
        case BL_FORMAT_R16G16_SINT: return DXGI_FORMAT_R16G16_SINT;
        case BL_FORMAT_R32_TYPELESS: return DXGI_FORMAT_R32_TYPELESS;
        case BL_FORMAT_D32_FLOAT: return DXGI_FORMAT_D32_FLOAT;
        case BL_FORMAT_R32_FLOAT: return DXGI_FORMAT_R32_FLOAT;
        case BL_FORMAT_R32_UINT: return DXGI_FORMAT_R32_UINT;
        case BL_FORMAT_R32_SINT: return DXGI_FORMAT_R32_SINT;
        case BL_FORMAT_R24G8_TYPELESS: return DXGI_FORMAT_R24G8_TYPELESS;
        case BL_FORMAT_D24_UNORM_S8_UINT: return DXGI_FORMAT_D24_UNORM_S8_UINT;
        case BL_FORMAT_R24_UNORM_X8_TYPELESS: return DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
        case BL_FORMAT_X24_TYPELESS_G8_UINT: return DXGI_FORMAT_X24_TYPELESS_G8_UINT;
        case BL_FORMAT_R8G8_TYPELESS: return DXGI_FORMAT_R8G8_TYPELESS;
        case BL_FORMAT_R8G8_UNORM: return DXGI_FORMAT_R8G8_UNORM;
        case BL_FORMAT_R8G8_UINT: return DXGI_FORMAT_R8G8_UINT;
        case BL_FORMAT_R8G8_SNORM: return DXGI_FORMAT_R8G8_SNORM;
        case BL_FORMAT_R8G8_SINT: return DXGI_FORMAT_R8G8_SINT;
        case BL_FORMAT_R16_TYPELESS: return DXGI_FORMAT_R16_TYPELESS;
        case BL_FORMAT_R16_FLOAT: return DXGI_FORMAT_R16_FLOAT;
        case BL_FORMAT_D16_UNORM: return DXGI_FORMAT_D16_UNORM;
        case BL_FORMAT_R16_UNORM: return DXGI_FORMAT_R16_UNORM;
        case BL_FORMAT_R16_UINT: return DXGI_FORMAT_R16_UINT;
        case BL_FORMAT_R16_SNORM: return DXGI_FORMAT_R16_SNORM;
        case BL_FORMAT_R16_SINT: return DXGI_FORMAT_R16_SINT;
        case BL_FORMAT_R8_TYPELESS: return DXGI_FORMAT_R8_TYPELESS;
        case BL_FORMAT_R8_UNORM: return DXGI_FORMAT_R8_UNORM;
        case BL_FORMAT_R8_UINT: return DXGI_FORMAT_R8_UINT;
        case BL_FORMAT_R8_SNORM: return DXGI_FORMAT_R8_SNORM;
        case BL_FORMAT_R8_SINT: return DXGI_FORMAT_R8_SINT;
        case BL_FORMAT_A8_UNORM: return DXGI_FORMAT_A8_UNORM;
        case BL_FORMAT_R1_UNORM: return DXGI_FORMAT_R1_UNORM;
        case BL_FORMAT_R9G9B9E5_SHAREDEXP: return DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
        case BL_FORMAT_R8G8_B8G8_UNORM: return DXGI_FORMAT_R8G8_B8G8_UNORM;
        case BL_FORMAT_G8R8_G8B8_UNORM: return DXGI_FORMAT_G8R8_G8B8_UNORM;
        case BL_FORMAT_BC1_TYPELESS: return DXGI_FORMAT_BC1_TYPELESS;
        case BL_FORMAT_BC1_UNORM: return DXGI_FORMAT_BC1_UNORM;
        case BL_FORMAT_BC1_UNORM_SRGB: return DXGI_FORMAT_BC1_UNORM_SRGB;
        case BL_FORMAT_BC2_TYPELESS: return DXGI_FORMAT_BC2_TYPELESS;
        case BL_FORMAT_BC2_UNORM: return DXGI_FORMAT_BC2_UNORM;
        case BL_FORMAT_BC2_UNORM_SRGB: return DXGI_FORMAT_BC2_UNORM_SRGB;
        case BL_FORMAT_BC3_TYPELESS: return DXGI_FORMAT_BC3_TYPELESS;
        case BL_FORMAT_BC3_UNORM: return DXGI_FORMAT_BC3_UNORM;
        case BL_FORMAT_BC3_UNORM_SRGB: return DXGI_FORMAT_BC3_UNORM_SRGB;
        case BL_FORMAT_BC4_TYPELESS: return DXGI_FORMAT_BC4_TYPELESS;
        case BL_FORMAT_BC4_UNORM: return DXGI_FORMAT_BC4_UNORM;
        case BL_FORMAT_BC4_SNORM: return DXGI_FORMAT_BC4_SNORM;
        case BL_FORMAT_BC5_TYPELESS: return DXGI_FORMAT_BC5_TYPELESS;
        case BL_FORMAT_BC5_UNORM: return DXGI_FORMAT_BC5_UNORM;
        case BL_FORMAT_BC5_SNORM: return DXGI_FORMAT_BC5_SNORM;
        case BL_FORMAT_B5G6R5_UNORM: return DXGI_FORMAT_B5G6R5_UNORM;
        case BL_FORMAT_B5G5R5A1_UNORM: return DXGI_FORMAT_B5G5R5A1_UNORM;
        case BL_FORMAT_B8G8R8A8_UNORM: return DXGI_FORMAT_B8G8R8A8_UNORM;
        case BL_FORMAT_B8G8R8X8_UNORM: return DXGI_FORMAT_B8G8R8X8_UNORM;
        case BL_FORMAT_R10G10B10_XR_BIAS_A2_UNORM: return DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
        case BL_FORMAT_B8G8R8A8_TYPELESS: return DXGI_FORMAT_B8G8R8A8_TYPELESS;
        case BL_FORMAT_B8G8R8A8_UNORM_SRGB: return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
        case BL_FORMAT_B8G8R8X8_TYPELESS: return DXGI_FORMAT_B8G8R8X8_TYPELESS;
        case BL_FORMAT_B8G8R8X8_UNORM_SRGB: return DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;
        case BL_FORMAT_BC6H_TYPELESS: return DXGI_FORMAT_BC6H_TYPELESS;
        case BL_FORMAT_BC6H_UF16: return DXGI_FORMAT_BC6H_UF16;
        case BL_FORMAT_BC6H_SF16: return DXGI_FORMAT_BC6H_SF16;
        case BL_FORMAT_BC7_TYPELESS: return DXGI_FORMAT_BC7_TYPELESS;
        case BL_FORMAT_BC7_UNORM: return DXGI_FORMAT_BC7_UNORM;
        case BL_FORMAT_BC7_UNORM_SRGB: return DXGI_FORMAT_BC7_UNORM_SRGB;
        case BL_FORMAT_AYUV: return DXGI_FORMAT_AYUV;
        case BL_FORMAT_Y410: return DXGI_FORMAT_Y410;
        case BL_FORMAT_Y416: return DXGI_FORMAT_Y416;
        case BL_FORMAT_NV12: return DXGI_FORMAT_NV12;
        case BL_FORMAT_P010: return DXGI_FORMAT_P010;
        case BL_FORMAT_P016: return DXGI_FORMAT_P016;
        case BL_FORMAT_420_OPAQUE: return DXGI_FORMAT_420_OPAQUE;
        case BL_FORMAT_YUY2: return DXGI_FORMAT_YUY2;
        case BL_FORMAT_Y210: return DXGI_FORMAT_Y210;
        case BL_FORMAT_Y216: return DXGI_FORMAT_Y216;
        case BL_FORMAT_NV11: return DXGI_FORMAT_NV11;
        case BL_FORMAT_AI44: return DXGI_FORMAT_AI44;
        case BL_FORMAT_IA44: return DXGI_FORMAT_IA44;
        case BL_FORMAT_P8: return DXGI_FORMAT_P8;
        case BL_FORMAT_A8P8: return DXGI_FORMAT_A8P8;
        case BL_FORMAT_B4G4R4A4_UNORM: return DXGI_FORMAT_B4G4R4A4_UNORM;

        case BL_FORMAT_P208: return DXGI_FORMAT_P208;
        case BL_FORMAT_V208: return DXGI_FORMAT_V208;
        case BL_FORMAT_V408: return DXGI_FORMAT_V408;

        case BL_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE: return DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE;
        case BL_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE: return DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE;

        case BL_FORMAT_FORCE_UINT: return DXGI_FORMAT_FORCE_UINT;
    }

    BL_ASSERT(false);
    return DXGI_FORMAT_UNKNOWN;
}

D3D12_BLEND ConvertBLBlendToD3D12Blend(BL_BLEND blend)
{
    switch (blend)
    {
        case BL_Blend_ZERO: return D3D12_BLEND_ZERO;
        case BL_Blend_ONE: return D3D12_BLEND_ONE;
        case BL_Blend_SRC_COLOR: return D3D12_BLEND_SRC_COLOR;
        case BL_Blend_INV_SRC_COLOR: return D3D12_BLEND_INV_SRC_COLOR;
        case BL_Blend_SRC_ALPHA: return D3D12_BLEND_SRC_ALPHA;
        case BL_Blend_INV_SRC_ALPHA: return D3D12_BLEND_INV_SRC_ALPHA;
        case BL_Blend_DEST_ALPHA: return D3D12_BLEND_DEST_ALPHA;
        case BL_Blend_INV_DEST_ALPHA: return D3D12_BLEND_INV_DEST_ALPHA;
        case BL_Blend_DEST_COLOR: return D3D12_BLEND_DEST_COLOR;
        case BL_Blend_INV_DEST_COLOR: return D3D12_BLEND_INV_DEST_COLOR;
        case BL_Blend_SRC_ALPHA_SAT: return D3D12_BLEND_SRC_ALPHA_SAT;
        case BL_Blend_BLEND_FACTOR: return D3D12_BLEND_BLEND_FACTOR;
        case BL_Blend_INV_BLEND_FACTOR: return D3D12_BLEND_INV_BLEND_FACTOR;
        case BL_Blend_SRC1_COLOR: return D3D12_BLEND_SRC1_COLOR;
        case BL_Blend_INV_SRC1_COLOR: return D3D12_BLEND_INV_SRC1_COLOR;
        case BL_Blend_SRC1_ALPHA: return D3D12_BLEND_SRC1_ALPHA;
        case BL_Blend_INV_SRC1_ALPHA: return D3D12_BLEND_INV_SRC1_ALPHA;
    }

    BL_ASSERT(false);
    return D3D12_BLEND_ZERO;
}

D3D12_BLEND_OP ConvertBLBlendOPToD3D12BlendOP(BL_BLEND_OP blendOP)
{
    switch (blendOP)
    {
        case BL_BlendOp_ADD: return D3D12_BLEND_OP_ADD;
        case BL_BlendOp_SUBTRACT: return D3D12_BLEND_OP_SUBTRACT;
        case BL_BlendOp_REV_SUBTRACT: return D3D12_BLEND_OP_REV_SUBTRACT;
        case BL_BlendOp_MIN: return D3D12_BLEND_OP_MIN;
        case BL_BlendOp_MAX: return D3D12_BLEND_OP_MAX;
    }

    BL_ASSERT(false);
    return D3D12_BLEND_OP_ADD;
}

D3D12_LOGIC_OP ConvertBLLogicOPToD3D12LogicOP(BL_LOGIC_OP logicOP)
{
    switch (logicOP)
    {
        case BL_LogicOp_CLEAR: return D3D12_LOGIC_OP_CLEAR;
        case BL_LogicOp_SET: return D3D12_LOGIC_OP_SET;
        case BL_LogicOp_COPY: return D3D12_LOGIC_OP_COPY;
        case BL_LogicOp_COPY_INVERTED: return D3D12_LOGIC_OP_COPY_INVERTED;
        case BL_LogicOp_NOOP: return D3D12_LOGIC_OP_NOOP;
        case BL_LogicOp_INVERT: return D3D12_LOGIC_OP_INVERT;
        case BL_LogicOp_AND: return D3D12_LOGIC_OP_AND;
        case BL_LogicOp_NAND: return D3D12_LOGIC_OP_NAND;
        case BL_LogicOp_OR: return D3D12_LOGIC_OP_OR;
        case BL_LogicOp_NOR: return D3D12_LOGIC_OP_NOR;
        case BL_LogicOp_XOR: return D3D12_LOGIC_OP_XOR;
        case BL_LogicOp_EQUIV: return D3D12_LOGIC_OP_EQUIV;
        case BL_LogicOp_AND_REVERSE: return D3D12_LOGIC_OP_AND_REVERSE;
        case BL_LogicOp_AND_INVERTED: return D3D12_LOGIC_OP_AND_INVERTED;
        case BL_LogicOp_OR_REVERSE: return D3D12_LOGIC_OP_OR_REVERSE;
        case BL_LOGICOp_OR_INVERTED: return D3D12_LOGIC_OP_OR_INVERTED;
    }

    BL_ASSERT(false);
    return D3D12_LOGIC_OP_CLEAR;
}

D3D12_STENCIL_OP ConvertBLStencilOPToD3D12StencilOP(BL_STENCIL_OP stencilOP)
{
    switch (stencilOP)
    {
        case BL_StencilOp_KEEP: return D3D12_STENCIL_OP_KEEP;
        case BL_StencilOp_ZERO: return D3D12_STENCIL_OP_ZERO;
        case BL_StencilOp_REPLACE: return D3D12_STENCIL_OP_REPLACE;
        case BL_StencilOp_INCR_SAT: return D3D12_STENCIL_OP_INCR_SAT;
        case BL_StencilOp_DECR_SAT: return D3D12_STENCIL_OP_DECR_SAT;
        case BL_StencilOp_INVERT: return D3D12_STENCIL_OP_INVERT;
        case BL_StencilOp_INCR: return D3D12_STENCIL_OP_INCR;
        case BL_StencilOp_DECR: return D3D12_STENCIL_OP_DECR;
    }

    BL_ASSERT(false);
    return D3D12_STENCIL_OP_KEEP;
}

D3D12_COMPARISON_FUNC ConvertBLComparisonFuncToD3D12ComparisonFunc(BL_COMPARISON_FUNC comparisonFunc)
{
    switch (comparisonFunc)
    {
        case BL_ComparisonFunc_NEVER: return D3D12_COMPARISON_FUNC_NEVER;
        case BL_ComparisonFunc_LESS: return D3D12_COMPARISON_FUNC_LESS;
        case BL_ComparisonFunc_EQUAL: return D3D12_COMPARISON_FUNC_EQUAL;
        case BL_ComparisonFunc_LESS_EQUAL: return D3D12_COMPARISON_FUNC_LESS_EQUAL;
        case BL_ComparisonFunc_GREATER: return D3D12_COMPARISON_FUNC_GREATER;
        case BL_ComparisonFunc_NOT_EQUAL: return D3D12_COMPARISON_FUNC_NOT_EQUAL;
        case BL_ComparisonFunc_GREATER_EQUAL: return D3D12_COMPARISON_FUNC_GREATER_EQUAL;
        case BL_ComparisonFunc_ALWAYS: return D3D12_COMPARISON_FUNC_ALWAYS;
    }

    BL_ASSERT(false);
    return D3D12_COMPARISON_FUNC_NEVER;
}

D3D12_CULL_MODE ConvertBLCullModeToD3D12CullMode(BL_CULL_MODE cullMode)
{
    switch (cullMode)
    {
        case BL_CullMode_NONE: return D3D12_CULL_MODE_NONE;
        case BL_CullMode_FRONT: return D3D12_CULL_MODE_FRONT;
        case BL_CullMode_BACK: return D3D12_CULL_MODE_BACK;
    }

    BL_ASSERT(false);
    return D3D12_CULL_MODE_NONE;
}

D3D12_FILL_MODE ConvertBLFillModeToD3D12FillMode(BL_FILL_MODE fillMode)
{
    switch (fillMode)
    {
        case BL_FillMode_WIREFRAME: return D3D12_FILL_MODE_WIREFRAME;
        case BL_FillMode_SOLID: return D3D12_FILL_MODE_SOLID;
    }

    BL_ASSERT(false);
    return D3D12_FILL_MODE_SOLID;
};

D3D_PRIMITIVE_TOPOLOGY ConvertBLPrimTopToD3D12PrimTop(BL_PRIMITIVE_TOPOLOGY primTop)
{
    switch (primTop)
    {
        case BL_PRIMITIVE_TOPOLOGY_UNDEFINED: return D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
        case BL_PRIMITIVE_TOPOLOGY_POINTLIST: return D3D_PRIMITIVE_TOPOLOGY_POINTLIST;
        case BL_PRIMITIVE_TOPOLOGY_LINELIST: return D3D_PRIMITIVE_TOPOLOGY_LINELIST;
        case BL_PRIMITIVE_TOPOLOGY_LINESTRIP: return D3D_PRIMITIVE_TOPOLOGY_LINESTRIP;
        case BL_PRIMITIVE_TOPOLOGY_TRIANGLELIST: return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
        case BL_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP: return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;
        case BL_PRIMITIVE_TOPOLOGY_LINELIST_ADJ: return D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ;
        case BL_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ: return D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ;
        case BL_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ: return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ;
        case BL_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ: return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ;
        case BL_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST;
        case BL_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST: return D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST;
    }

    BL_ASSERT(false);
    return D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
}
