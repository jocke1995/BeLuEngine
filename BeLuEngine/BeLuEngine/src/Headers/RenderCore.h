#ifndef RENDERCORE_H
#define RENDERCORE_H

class IGraphicsContext;

// Dont create this class immediatly, use the #define below
class ScopedPIXEvent
{
public:
	ScopedPIXEvent(const char* nameOfTask, IGraphicsContext* graphicsContext);
	~ScopedPIXEvent();

private:
	IGraphicsContext* m_pGraphicsContext = nullptr;
};

#ifdef DEBUG	// This is both for Debug and Release, not for Dist
	#define ScopedPixEvent(name, commandList) ScopedPIXEvent concat(PIX_Event_Marker, __LINE__)(#name, commandList);
#else
	#define ScopedPixEvent(name, commandList);
#endif

enum BL_FORMAT
{
    BL_FORMAT_UNKNOWN,
    BL_FORMAT_R32G32B32A32_TYPELESS,
    BL_FORMAT_R32G32B32A32_FLOAT,
    BL_FORMAT_R32G32B32A32_UINT,
    BL_FORMAT_R32G32B32A32_SINT,
    BL_FORMAT_R32G32B32_TYPELESS,
    BL_FORMAT_R32G32B32_FLOAT,
    BL_FORMAT_R32G32B32_UINT,
    BL_FORMAT_R32G32B32_SINT,
    BL_FORMAT_R16G16B16A16_TYPELESS,
    BL_FORMAT_R16G16B16A16_FLOAT,
    BL_FORMAT_R16G16B16A16_UNORM,
    BL_FORMAT_R16G16B16A16_UINT,
    BL_FORMAT_R16G16B16A16_SNORM,
    BL_FORMAT_R16G16B16A16_SINT,
    BL_FORMAT_R32G32_TYPELESS,
    BL_FORMAT_R32G32_FLOAT,
    BL_FORMAT_R32G32_UINT,
    BL_FORMAT_R32G32_SINT,
    BL_FORMAT_R32G8X24_TYPELESS,
    BL_FORMAT_D32_FLOAT_S8X24_UINT,
    BL_FORMAT_R32_FLOAT_X8X24_TYPELESS,
    BL_FORMAT_X32_TYPELESS_G8X24_UINT,
    BL_FORMAT_R10G10B10A2_TYPELESS,
    BL_FORMAT_R10G10B10A2_UNORM,
    BL_FORMAT_R10G10B10A2_UINT,
    BL_FORMAT_R11G11B10_FLOAT,
    BL_FORMAT_R8G8B8A8_TYPELESS,
    BL_FORMAT_R8G8B8A8_UNORM,
    BL_FORMAT_R8G8B8A8_UNORM_SRGB,
    BL_FORMAT_R8G8B8A8_UINT,
    BL_FORMAT_R8G8B8A8_SNORM,
    BL_FORMAT_R8G8B8A8_SINT,
    BL_FORMAT_R16G16_TYPELESS,
    BL_FORMAT_R16G16_FLOAT,
    BL_FORMAT_R16G16_UNORM,
    BL_FORMAT_R16G16_UINT,
    BL_FORMAT_R16G16_SNORM,
    BL_FORMAT_R16G16_SINT,
    BL_FORMAT_R32_TYPELESS ,
    BL_FORMAT_D32_FLOAT,
    BL_FORMAT_R32_FLOAT,
    BL_FORMAT_R32_UINT,
    BL_FORMAT_R32_SINT,
    BL_FORMAT_R24G8_TYPELESS,
    BL_FORMAT_D24_UNORM_S8_UINT,
    BL_FORMAT_R24_UNORM_X8_TYPELESS,
    BL_FORMAT_X24_TYPELESS_G8_UINT,
    BL_FORMAT_R8G8_TYPELESS,
    BL_FORMAT_R8G8_UNORM,
    BL_FORMAT_R8G8_UINT,
    BL_FORMAT_R8G8_SNORM,
    BL_FORMAT_R8G8_SINT,
    BL_FORMAT_R16_TYPELESS,
    BL_FORMAT_R16_FLOAT,
    BL_FORMAT_D16_UNORM,
    BL_FORMAT_R16_UNORM,
    BL_FORMAT_R16_UINT,
    BL_FORMAT_R16_SNORM,
    BL_FORMAT_R16_SINT,
    BL_FORMAT_R8_TYPELESS,
    BL_FORMAT_R8_UNORM,
    BL_FORMAT_R8_UINT,
    BL_FORMAT_R8_SNORM,
    BL_FORMAT_R8_SINT,
    BL_FORMAT_A8_UNORM,
    BL_FORMAT_R1_UNORM,
    BL_FORMAT_R9G9B9E5_SHAREDEXP,
    BL_FORMAT_R8G8_B8G8_UNORM,
    BL_FORMAT_G8R8_G8B8_UNORM,
    BL_FORMAT_BC1_TYPELESS,
    BL_FORMAT_BC1_UNORM,
    BL_FORMAT_BC1_UNORM_SRGB,
    BL_FORMAT_BC2_TYPELESS,
    BL_FORMAT_BC2_UNORM,
    BL_FORMAT_BC2_UNORM_SRGB,
    BL_FORMAT_BC3_TYPELESS,
    BL_FORMAT_BC3_UNORM,
    BL_FORMAT_BC3_UNORM_SRGB,
    BL_FORMAT_BC4_TYPELESS,
    BL_FORMAT_BC4_UNORM,
    BL_FORMAT_BC4_SNORM,
    BL_FORMAT_BC5_TYPELESS,
    BL_FORMAT_BC5_UNORM,
    BL_FORMAT_BC5_SNORM,
    BL_FORMAT_B5G6R5_UNORM ,
    BL_FORMAT_B5G5R5A1_UNORM,
    BL_FORMAT_B8G8R8A8_UNORM,
    BL_FORMAT_B8G8R8X8_UNORM,
    BL_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
    BL_FORMAT_B8G8R8A8_TYPELESS,
    BL_FORMAT_B8G8R8A8_UNORM_SRGB,
    BL_FORMAT_B8G8R8X8_TYPELESS,
    BL_FORMAT_B8G8R8X8_UNORM_SRGB,
    BL_FORMAT_BC6H_TYPELESS,
    BL_FORMAT_BC6H_UF16,
    BL_FORMAT_BC6H_SF16,
    BL_FORMAT_BC7_TYPELESS,
    BL_FORMAT_BC7_UNORM,
    BL_FORMAT_BC7_UNORM_SRGB,
    BL_FORMAT_AYUV,
    BL_FORMAT_Y410,
    BL_FORMAT_Y416,
    BL_FORMAT_NV12,
    BL_FORMAT_P010,
    BL_FORMAT_P016,
    BL_FORMAT_420_OPAQUE,
    BL_FORMAT_YUY2,
    BL_FORMAT_Y210,
    BL_FORMAT_Y216,
    BL_FORMAT_NV11,
    BL_FORMAT_AI44,
    BL_FORMAT_IA44,
    BL_FORMAT_P8,
    BL_FORMAT_A8P8,
    BL_FORMAT_B4G4R4A4_UNORM,

    BL_FORMAT_P208,
    BL_FORMAT_V208,
    BL_FORMAT_V408,

    BL_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
    BL_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
    BL_FORMAT_FORCE_UINT
};

DXGI_FORMAT ConvertBLFormatToD3D12Format(BL_FORMAT format);

#pragma region Blend
enum BL_BLEND
{
    BL_Blend_ZERO,
    BL_Blend_ONE,
    BL_Blend_SRC_COLOR,
    BL_Blend_INV_SRC_COLOR,
    BL_Blend_SRC_ALPHA,
    BL_Blend_INV_SRC_ALPHA,
    BL_Blend_DEST_ALPHA,
    BL_Blend_INV_DEST_ALPHA,
    BL_Blend_DEST_COLOR,
    BL_Blend_INV_DEST_COLOR,
    BL_Blend_SRC_ALPHA_SAT,
    BL_Blend_BLEND_FACTOR,
    BL_Blend_INV_BLEND_FACTOR,
    BL_Blend_SRC1_COLOR,
    BL_Blend_INV_SRC1_COLOR,
    BL_Blend_SRC1_ALPHA,
    BL_Blend_INV_SRC1_ALPHA
};
D3D12_BLEND ConvertBLBlendToD3D12Blend(BL_BLEND blend);

enum BL_BLEND_OP
{
    BL_BlendOp_ADD,
    BL_BlendOp_SUBTRACT,
    BL_BlendOp_REV_SUBTRACT,
    BL_BlendOp_MIN,
    BL_BlendOp_MAX
};
D3D12_BLEND_OP ConvertBLBlendOPToD3D12BlendOP(BL_BLEND_OP blendOP);

enum BL_LOGIC_OP
{
    BL_LogicOp_CLEAR,
    BL_LogicOp_SET,
    BL_LogicOp_COPY,
    BL_LogicOp_COPY_INVERTED,
    BL_LogicOp_NOOP,
    BL_LogicOp_INVERT,
    BL_LogicOp_AND,
    BL_LogicOp_NAND,
    BL_LogicOp_OR,
    BL_LogicOp_NOR,
    BL_LogicOp_XOR,
    BL_LogicOp_EQUIV,
    BL_LogicOp_AND_REVERSE,
    BL_LogicOp_AND_INVERTED,
    BL_LogicOp_OR_REVERSE,
    BL_LOGICOp_OR_INVERTED,
};
D3D12_LOGIC_OP ConvertBLLogicOPToD3D12LogicOP(BL_LOGIC_OP logicOP);

enum F_RENDER_TARGET_WRITE_MASK
{
    BL_COLOR_WRITE_NONE = BIT(0),
    BL_COLOR_WRITE_ENABLE_RED = BIT(1),
    BL_COLOR_WRITE_ENABLE_GREEN = BIT(2),
    BL_COLOR_WRITE_ENABLE_BLUE = BIT(3),
    BL_COLOR_WRITE_ENABLE_ALPHA = BIT(4),
    BL_COLOR_WRITE_ENABLE_ALL = BIT(5)
};

struct BL_RENDER_TARGET_BLEND_DESC
{
    bool enableBlend;
    bool enableLogicOP;
    BL_BLEND srcBlend;
    BL_BLEND destBlend;
    BL_BLEND_OP blendOp;
    BL_BLEND srcBlendAlpha;
    BL_BLEND destBlendAlpha;
    BL_BLEND_OP blendOpAlpha;
    BL_LOGIC_OP logicOp;
    char renderTargetWriteMask; // F_RENDER_TARGET_WRITE_MASK
};

#pragma endregion

#pragma region DepthStencil
enum BL_STENCIL_OP
{
    BL_StencilOp_KEEP,
    BL_StencilOp_ZERO,
    BL_StencilOp_REPLACE,
    BL_StencilOp_INCR_SAT,
    BL_StencilOp_DECR_SAT,
    BL_StencilOp_INVERT,
    BL_StencilOp_INCR,
    BL_StencilOp_DECR
};
D3D12_STENCIL_OP ConvertBLStencilOPToD3D12StencilOP(BL_STENCIL_OP stencilOP);

enum BL_COMPARISON_FUNC
{
    BL_ComparisonFunc_NEVER,
    BL_ComparisonFunc_LESS,
    BL_ComparisonFunc_EQUAL,
    BL_ComparisonFunc_LESS_EQUAL,
    BL_ComparisonFunc_GREATER,
    BL_ComparisonFunc_NOT_EQUAL,
    BL_ComparisonFunc_GREATER_EQUAL,
    BL_ComparisonFunc_ALWAYS
};
D3D12_COMPARISON_FUNC ConvertBLComparisonFuncToD3D12ComparisonFunc(BL_COMPARISON_FUNC comparisonFunc);

enum BL_DEPTH_WRITE_MASK
{
    BL_DEPTH_WRITE_MASK_ZERO = BIT(0),
    BL_DEPTH_WRITE_MASK_ALL = BIT(1)
};

struct BL_DEPTH_STENCILOP_DESC
{
    BL_STENCIL_OP stencilFailOp;
    BL_STENCIL_OP stencilDepthFailOp;
    BL_STENCIL_OP stencilPassOp;
    BL_COMPARISON_FUNC stencilComparisonFunc;
};

struct BL_DEPTH_STENCIL_DESC
{
    bool enableDepth;
    unsigned int depthWriteMask;    // BL_DEPTH_WRITE_MASK
    BL_COMPARISON_FUNC depthComparisonFunc;
    bool enableStencil;
    char stencilReadMask;
    char stencilWriteMask;
    BL_DEPTH_STENCILOP_DESC frontFace;
    BL_DEPTH_STENCILOP_DESC backFace;
};

#pragma endregion

#pragma region Misc


enum BL_CULL_MODE
{
    BL_CullMode_NONE,
    BL_CullMode_FRONT,
    BL_CullMode_BACK
};
D3D12_CULL_MODE ConvertBLCullModeToD3D12CullMode(BL_CULL_MODE cullMode);

enum BL_FILL_MODE
{
    BL_FillMode_WIREFRAME,
    BL_FillMode_SOLID
};
D3D12_FILL_MODE ConvertBLFillModeToD3D12FillMode(BL_FILL_MODE fillMode);

#pragma endregion

#pragma region PrimitiveTopology
enum BL_PRIMITIVE_TOPOLOGY
{
    BL_PRIMITIVE_TOPOLOGY_UNDEFINED,
    BL_PRIMITIVE_TOPOLOGY_POINTLIST,
    BL_PRIMITIVE_TOPOLOGY_LINELIST,
    BL_PRIMITIVE_TOPOLOGY_LINESTRIP,
    BL_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    BL_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    BL_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    BL_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    BL_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    BL_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    BL_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    BL_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
};
D3D_PRIMITIVE_TOPOLOGY ConvertBLPrimTopToD3D12PrimTop(BL_PRIMITIVE_TOPOLOGY primTop);
#pragma endregion

#endif