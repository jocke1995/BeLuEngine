#ifndef D3D12GRAPHICSPIPELINESTATE_H
#define D3D12GRAPHICSPIPELINESTATE_H

#include "../IGraphicsPipelineState.h"

struct alignas(void*) StreamingRasterizerDesc
{
private:
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE Type = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER;

public:
	StreamingRasterizerDesc();
	D3D12_RASTERIZER_DESC desc = {};
};

struct alignas(void*) StreamingBlendDesc
{
private:
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE Type = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND;

public:
	D3D12_BLEND_DESC desc = {};
};

struct alignas(void*) D3D12_PSO_STREAM
{
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeRootSig = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE;
	ID3D12RootSignature* rootSignature;

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeVS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS;
	D3D12_SHADER_BYTECODE VS;

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typePS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS;
	D3D12_SHADER_BYTECODE PS;

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeDS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS;
	D3D12_SHADER_BYTECODE DS; // Not used atm
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeHS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS;
	D3D12_SHADER_BYTECODE HS; // Not used atm
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeGS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS;
	D3D12_SHADER_BYTECODE GS; // Not used atm
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeCS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS;
	D3D12_SHADER_BYTECODE CS;

	StreamingBlendDesc blendDesc;
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeSampleMask = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK;
	unsigned int sampleMask;

	StreamingRasterizerDesc rasterizerDesc;

	//D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeIBStripCutValue = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE;
	//D3D12_INDEX_BUFFER_STRIP_CUT_VALUE indexBufferStripCutValue; // Not used atm

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typePrimTop = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY;
	D3D12_PRIMITIVE_TOPOLOGY_TYPE primTop;

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeRenderTargetFormats = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS;
	D3D12_RT_FORMAT_ARRAY renderTargetFormats;	// set from desc

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeDepthStencilFormat = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT;
	DXGI_FORMAT depthStencilFormat;	// set from desc
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeNodeMask = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK;
	D3D12_NODE_MASK nodeMask;	// Set to 1 allways

	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeCachedPSO = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO;
	D3D12_CACHED_PIPELINE_STATE cachedPipelineState; // Not used atm
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeFlags = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS;
	D3D12_PIPELINE_STATE_FLAGS pipelineStateFlags; // Not used atm
	
	D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeDepthStencil1 = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1;
	D3D12_DEPTH_STENCIL_DESC1 depthStencilDesc1; // Not used atm
	
	//D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeAS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS;
	//D3D12_SHADER_BYTECODE AS; // Not used atm
	//
	//D3D12_PIPELINE_STATE_SUBOBJECT_TYPE typeMS = D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS;
	//D3D12_SHADER_BYTECODE MS; // Not used atm
};

class D3D12GraphicsPipelineState : public IGraphicsPipelineState
{
public:
	D3D12GraphicsPipelineState(const PSODesc& desc, const std::wstring& name);
	virtual ~D3D12GraphicsPipelineState();

private:
	friend class D3D12GraphicsContext;
	ID3D12PipelineState* m_pPSO = nullptr;

};

#endif